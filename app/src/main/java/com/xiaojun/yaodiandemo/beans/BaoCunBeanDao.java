package com.xiaojun.yaodiandemo.beans;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BAO_CUN_BEAN".
*/
public class BaoCunBeanDao extends AbstractDao<BaoCunBean, Long> {

    public static final String TABLENAME = "BAO_CUN_BEAN";

    /**
     * Properties of entity BaoCunBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CameraIP = new Property(1, String.class, "cameraIP", false, "CAMERA_IP");
        public final static Property Zhuji = new Property(2, String.class, "zhuji", false, "ZHUJI");
        public final static Property JiudianID = new Property(3, String.class, "jiudianID", false, "JIUDIAN_ID");
        public final static Property JiudianName = new Property(4, String.class, "jiudianName", false, "JIUDIAN_NAME");
    }


    public BaoCunBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BaoCunBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BAO_CUN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"CAMERA_IP\" TEXT," + // 1: cameraIP
                "\"ZHUJI\" TEXT," + // 2: zhuji
                "\"JIUDIAN_ID\" TEXT," + // 3: jiudianID
                "\"JIUDIAN_NAME\" TEXT);"); // 4: jiudianName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BAO_CUN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BaoCunBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String cameraIP = entity.getCameraIP();
        if (cameraIP != null) {
            stmt.bindString(2, cameraIP);
        }
 
        String zhuji = entity.getZhuji();
        if (zhuji != null) {
            stmt.bindString(3, zhuji);
        }
 
        String jiudianID = entity.getJiudianID();
        if (jiudianID != null) {
            stmt.bindString(4, jiudianID);
        }
 
        String jiudianName = entity.getJiudianName();
        if (jiudianName != null) {
            stmt.bindString(5, jiudianName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BaoCunBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String cameraIP = entity.getCameraIP();
        if (cameraIP != null) {
            stmt.bindString(2, cameraIP);
        }
 
        String zhuji = entity.getZhuji();
        if (zhuji != null) {
            stmt.bindString(3, zhuji);
        }
 
        String jiudianID = entity.getJiudianID();
        if (jiudianID != null) {
            stmt.bindString(4, jiudianID);
        }
 
        String jiudianName = entity.getJiudianName();
        if (jiudianName != null) {
            stmt.bindString(5, jiudianName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public BaoCunBean readEntity(Cursor cursor, int offset) {
        BaoCunBean entity = new BaoCunBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cameraIP
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zhuji
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // jiudianID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // jiudianName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BaoCunBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCameraIP(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZhuji(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJiudianID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJiudianName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BaoCunBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BaoCunBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BaoCunBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
